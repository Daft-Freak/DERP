name: CMake

on:
  push:
    branches:
      - '**' # only run on branches
  pull_request:
  release:
    types: [published]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            name: Linux
            release-suffix: LIN64

          - os: windows-latest
            name: Visual Studio
            release-suffix: WIN64

    runs-on: ${{matrix.os}}

    env:
      RELEASE_FILE: ${{github.event.repository.name}}-${{github.event.release.tag_name}}-${{matrix.release-suffix}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Linux deps
    - name: Install deps
      if: runner.os == 'Linux'
      run: |
        sudo apt update && sudo apt install libsdl2-dev

    # Windows (VS) deps
    - name: Install deps
      if: runner.os == 'Windows'
      run: vcpkg install sdl2:x64-windows

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_PACKAGE_FILE_NAME=${{env.RELEASE_FILE}} ${{matrix.cmake-args}}

    # Problem matching
    - if: runner.os != 'Windows'
      uses: ammaraskar/gcc-problem-matcher@master
    - if: runner.os == 'Windows'
      uses: ammaraskar/msvc-problem-matcher@master

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE -j 2

    - name: Package Release
      if: matrix.release-suffix != ''
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake --build . --config $BUILD_TYPE --target package

    - name: Upload tar
      if: github.event_name == 'release' && matrix.release-suffix != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{runner.workspace}}/build/${{env.RELEASE_FILE}}.tar.gz
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}.tar.gz
        asset_content_type: application/octet-stream #??

    - name: Upload zip
      if: github.event_name == 'release' && matrix.release-suffix != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{runner.workspace}}/build/${{env.RELEASE_FILE}}.zip
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}.zip
        asset_content_type: application/zip

    - name: Upload artifact
      if: github.event_name != 'release' && matrix.release-suffix != ''
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.RELEASE_FILE}}
        path: ${{runner.workspace}}/build/${{env.RELEASE_FILE}}.zip